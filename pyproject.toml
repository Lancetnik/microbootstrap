[tool.poetry]
name = "microbootstrap"
keywords = [
    "python",
    "microservice",
    "bootstrap",
    "opentelemetry",
    "logging",
    "error-tracing",
    "litestar",
    "fastapi",
]

classifiers = [
    "Typing :: Typed",
    "Topic :: Software Development :: Build Tools",
    "Operating System :: MacOS",
    "Operating System :: Microsoft",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
version = "0.5.2"
description = "Package for bootstrapping new micro-services"
authors = ["community-of-python"]
readme = "README.md"
packages = [{ include = "microbootstrap" }]

[tool.poetry.urls]
homepage = "https://github.com/community-of-python/microbootstrap"
repository = "https://github.com/community-of-python/microbootstrap"
documentation = "https://pypi.org/project/microbootstrap/"


[tool.poetry.dependencies]
python = "^3.9"
pydantic-settings = "*"
granian = { version = "*", extras = ["reload"] }
rich = "*"
eval-type-backport = "*"
# for logging boostrap
structlog = "*"
# for sentry bootstrap
sentry-sdk = "*"
# for opentelemetry bootstrap
opentelemetry-api = "*"
opentelemetry-sdk = "*"
opentelemetry-exporter-otlp = "*"
opentelemetry-exporter-prometheus-remote-write = "*"
opentelemetry-instrumentation = "*"
opentelemetry-instrumentation-system-metrics = "*"
# optional extras for any web framework
opentelemetry-instrumentation-asgi = { version = "*", optional = true }
health-checks = { version = "*", optional = true }
# optional extras for Litestar
litestar = { version = "*", optional = true }
prometheus-client = { version = "*", optional = true }
litestar-offline-docs = { version = "*", optional = true }
# optional extras for FastAPI
fastapi = { version = "*", optional = true }
prometheus-fastapi-instrumentator = { version = "*", optional = true }
opentelemetry-instrumentation-fastapi = { version = "*", optional = true }
fastapi-offline-docs = { version = "*", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
pytest-mock = "*"
typing-extensions = "*"
httpx = "*"
anyio = "*"
pre-commit = "*"
redis = "*"
opentelemetry-instrumentation-redis = "*"
trio = "*"
mypy = "*"
ruff = "*"


[tool.poetry.extras]
fastapi = [
    "fastapi",
    "fastapi-offline-docs",
    "health-checks",
    "opentelemetry-instrumentation-asgi",
    "opentelemetry-instrumentation-fastapi",
    "prometheus-fastapi-instrumentator",
]
litestar = [
    "litestar",
    "litestar-offline-docs",
    "health-checks",
    "opentelemetry-instrumentation-asgi",
    "prometheus-client",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
plugins = ["pydantic.mypy"]
files = ["microbootstrap", "tests"]
python_version = "3.9"
strict = true
pretty = true

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "EM",
    "FBT",
    "TRY003",
    "FIX002",
    "TD003",
    "D1",
    "D106",
    "D203",
    "D213",
    "G004",
    "FA",
    "COM812",
    "ISC001",
]

[tool.ruff.lint.isort]
no-lines-before = ["standard-library", "local-folder"]
known-third-party = []
known-local-folder = []
lines-after-imports = 2

[tool.ruff.lint.extend-per-file-ignores]
"tests/*.py" = ["S101", "S311"]

[tool.coverage.report]
exclude_also = ["if typing.TYPE_CHECKING:", 'class \w+\(typing.Protocol\):']
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = '--cov=. -p no:warnings --cov-report term-missing'
